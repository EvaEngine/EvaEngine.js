#!/usr/bin/env babel-node
const { EvaEngine, DI, exceptions, commands } = require('../');
const co = (fn) => { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

const engine = new EvaEngine({
  projectRoot: process.cwd()
}, 'cli');
engine.registerCommands([
  commands
]);

const logger = DI.get('logger');
co(function* () {
  try {
    yield engine.runCLI();
  } catch (e) {
    if (e instanceof exceptions.StandardException) {
      logger.warn(e.getDetails());
      return logger.warn(e.message);
    }
    logger.error(e);
  }
  const redis = DI.get('redis');
  if (redis.isConnected()) {
    redis.cleanup();
  }
  return true;
})();
